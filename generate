#!/usr/bin/env php
<?php

namespace mermshaus\xfine\generate;

use mermshaus\fine\Application;

require __DIR__ . '/src/Application.php';

/** @noinspection PhpMultipleClassesDeclarationsInOneFile */

final class FileExtensionFilterIterator extends \FilterIterator
{
    /**
     * @var string[]
     */
    private $extensionList = [];

    /**
     * @param \Iterator $innerIterator
     * @param string[]  $extensionList
     */
    public function __construct(\Iterator $innerIterator, array $extensionList)
    {
        parent::__construct($innerIterator);

        foreach ($extensionList as $extension) {
            $this->extensionList[strtolower($extension)] = true;
        }
    }

    /**
     * @return bool
     */
    public function accept()
    {
        $extension = strtolower($this->current()->getExtension());

        return isset($this->extensionList[$extension]);
    }
}

final class Generator
{
    /**
     * @param string   $path
     * @param string[] $extensionList
     *
     * @return array
     * @throws \UnexpectedValueException
     */
    public function getSortedFiles($path, array $extensionList)
    {
        $rdi = new \RecursiveDirectoryIterator(
            $path,
            \RecursiveDirectoryIterator::SKIP_DOTS
        );

        $rii = new \RecursiveIteratorIterator(
            $rdi,
            \RecursiveIteratorIterator::LEAVES_ONLY
        );

        $fii = new FileExtensionFilterIterator($rii, $extensionList);

        $files = iterator_to_array($fii);

        usort($files, function (\SplFileInfo $a, \SplFileInfo $b) {
            $da = dirname($a->getRealPath());
            $db = dirname($b->getRealPath());

            if ($da < $db) {
                return -1;
            }

            if ($da > $db) {
                return 1;
            }

            if ($a->getRealPath() < $b->getRealPath()) {
                return -1;
            }

            if ($a->getRealPath() > $b->getRealPath()) {
                return 1;
            }

            return 0;
        });

        return $files;
    }

    /**
     * @param string $file
     *
     * @return string
     * @throws \RuntimeException
     */
    public function appendSourceFile($file)
    {
        $data = file_get_contents($file);

        $data = str_replace("declare(strict_types=1);\n\n", '', $data);

        if (strpos($data, '<?php') !== 0) {
            throw new \RuntimeException(sprintf('File "%s" does not begin with \'<?php\'', $file));
        }

        $data = substr($data, 5);

        return trim($data);
    }

    /**
     * @param string $file
     * @param string $baseDir
     *
     * @return string
     */
    public function appendViewFile($file, $baseDir)
    {
        $data = file_get_contents($file);

        $key = substr(dirname($file), strlen($baseDir . '/'));

        if (!is_string($key)) {
            $key = '';
        }

        if ($key !== '') {
            $key .= '/';
        }

        $key .= basename($file, '.phtml');

        $tpl = <<<'TPL'
$viewScriptManager->addScript('%s', function () {
?>%s<?php
});


TPL;

        return sprintf($tpl, $key, $data);
    }

    /**
     * @param string $input
     * @param string $type
     *
     * @return string
     * @throws \RuntimeException
     */
    private function operation_minify($input, $type)
    {
        if (trim(shell_exec('which yui-compressor')) === '') {
            fwrite(STDERR, "yui-compressor not found. Skipping minify operation\n");
            return $input;
        }

        if ($type === 'application/javascript') {
            $type = 'js';
        } elseif ($type === 'text/css') {
            $type = 'css';
        } else {
            throw new \RuntimeException(
                sprintf('Type %s not supported in operation_minify', $type)
            );
        }

        $cmd = 'echo ' . escapeshellarg($input) . ' | yui-compressor --type ' . escapeshellarg($type);

        return shell_exec($cmd);
    }

    /**
     * @return string
     * @throws \Exception
     */
    public function getAssetData()
    {
        $files = [
            'jquery-1.12.4.min.js'        => [
                'type'       => 'application/javascript',
                'path'       => __DIR__ . '/assets/jquery-1.12.4.min.js',
                'operations' => [],
            ],
            'jquery.mobile.custom.min.js' => [
                'type'       => 'application/javascript',
                'path'       => __DIR__ . '/assets/jquery.mobile.custom.min.js',
                'operations' => [],
            ],
            'fine.js'                     => [
                'type'       => 'application/javascript',
                'path'       => __DIR__ . '/assets/fine.js',
                'operations' => ['minify'],
            ],
            'fine.css'                    => [
                'type'       => 'text/css',
                'path'       => __DIR__ . '/assets/fine.css',
                'operations' => ['minify'],
            ],
        ];

        $data = [];

        foreach ($files as $key => $file) {
            $content = file_get_contents($file['path']);

            foreach ($file['operations'] as $op) {
                if ($op === 'minify') {
                    $content = $this->operation_minify($content, $file['type']);
                }
            }

            $data[$key] = [
                'type'    => $file['type'],
                'content' => $content,
            ];
        }

        return json_encode($data, JSON_HEX_TAG);
    }
}

call_user_func(function () {
    $generator = new Generator();

    $dt = new \DateTime('now', new \DateTimeZone('UTC'));

    $output = sprintf(<<<'EOT'
<?php
/**
 * Fine Image Gallery
 *
 * This file was automatically generated and should not be edited.
 *
 * Version:      %s
 * Generated at: %s
 *
 * License: MIT <https://opensource.org/licenses/MIT>
 *
 * Copyright 2017-%s Marc Ermshaus <https://www.ermshaus.org/>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
 
declare(strict_types=1);


EOT
        , Application::VERSION,
        $dt->format('Y-m-d H:i:s \\U\\T\\C'),
        $dt->format('Y'));

    foreach ($generator->getSortedFiles(__DIR__ . '/src', ['php']) as $file) {
        $output .= $generator->appendSourceFile($file);
        $output .= "\n\n";
    }

    $output .= <<<'EOT'
namespace mermshaus\fine;

$configPath = (file_exists(__DIR__ . '/fine.json')) ? __DIR__ . '/fine.json' : null;
$config = new Config($configPath);

$viewScriptManager = new ViewScriptManager();


EOT;

    foreach ($generator->getSortedFiles(__DIR__ . '/views', ['phtml']) as $file) {
        $output .= $generator->appendViewFile($file, __DIR__ . '/views');
    }

    $output .= <<<'EOT'
$cache = new FileCache($config->cacheDir);

#$GLOBALS['loadCalls'] = 0;

(new Application($config, $viewScriptManager, $cache))->run();

#if ($GLOBALS['loadCalls'] > 0) {
#    echo '<div id="debug">Image::load() calls: ' . $GLOBALS['loadCalls'] . '</div>';
#}

__halt_compiler();

EOT;

    $output .= $generator->getAssetData() . "\n";

    echo $output;
});
